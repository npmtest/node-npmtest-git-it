{"/home/travis/build/npmtest/node-npmtest-git-it/test.js":"/* istanbul instrument in package npmtest_git_it */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-git-it/lib.npmtest_git_it.js":"/* istanbul instrument in package npmtest_git_it */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_git_it = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_git_it = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-git-it/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-git-it && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_git_it */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_git_it\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_git_it.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_git_it.rollup.js'] =\n            local.assetsDict['/assets.npmtest_git_it.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_git_it.__dirname + '/lib.npmtest_git_it.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-git-it/node_modules/git-it/git-it.js":"#!/usr/bin/env node\n\nconst Workshopper = require('workshopper-jlord'),\n      path = require('path')\n\nprocess.env.LANG = 'C'\n\nWorkshopper({\n  name: 'git-it',\n  title: 'GIT + GITHUB : VERSION CONTROL + SOCIAL CODING',\n  appDir: __dirname,\n  helpFile: path.join(__dirname, 'help.txt'),\n  menu: {\n    fg: /^win/.test(process.platform) ? 'white' : 231,\n    bg: /^win/.test(process.platform) ? 'blue'  : 33\n  }\n}).init()\n","/home/travis/build/npmtest/node-npmtest-git-it/node_modules/git-it/txtToHTML.js":"var fs = require('fs')\nvar marked = require('marked')\nvar glob = require('glob')\n\nglob(\"**/*.txt\", function (err, files) {\n  if (err) return console.log(\"Err globbing\")\n  var matches = []\n  files.forEach(function(file) {\n    if (file.match('problems/')) {\n      matches.push(file)\n    } else return\n  })\n  convertToHTML(matches)\n})\n\nfunction convertToHTML(files) {\n  files.forEach(function(file) {\n    var filename = createFilename(file)\n    var txt = fs.readFileSync(file)\n    var html = marked(txt.toString())\n    fs.writeFileSync('html/' + filename + '.html', html)\n  })\n}\n\nfunction createFilename(origname) {\n  var string = origname.split('/').splice(1, 2).join(\"_\")\n  return string.toString().replace('.txt', '')\n}\n","/home/travis/build/npmtest/node-npmtest-git-it/node_modules/git-it/guide/buildpages.js":"var Handlebars = require('handlebars')\nvar fs = require('fs')\nvar glob = require('glob')\n\nvar translateLocale = require('./translate-locale.js')\n\nvar layout = fs.readFileSync(__dirname + '/layout.hbs').toString()\nvar thefiles = []\n\n// Take in a language type if any\nvar lang = process.argv[2]\nvar rawFiles = __dirname + (lang ? '/raw-content-' + lang + '/' : '/raw-content/')\nvar builtContent = __dirname + (lang ? '/challenges-' + lang + '/' : '/challenges/')\n\n// I can probably use glob better to avoid\n// finding the right files within the files\nglob(\"*.html\", {cwd: rawFiles}, function (err, files) {\n  thefiles = files\n  if (err) return console.log(err)\n  // var matches = files.map(function(file) {\n  //   if (file.match('guide/raw-content/')) {\n  //     return file\n  //   }\n  // })\n  buildPage(files)\n})\n\nfunction buildPage(files) {\n  files.forEach(function(file) {\n    // shouldn't have to do this if my\n    // mapping were correct\n    if (!file) return\n\n    // if language, run the noun and verb\n    // translations\n\n\n    var content = {\n      header: buildHeader(file),\n      footer: buildFooter(file),\n      body: fs.readFileSync(rawFiles + file).toString()\n    }\n\n    if (lang) {\n      content.body = translateLocale(content.body, lang)\n    }\n    \n    var shortname = makeShortname(file)\n    var template = Handlebars.compile(layout)\n    var final = template(content)\n    fs.writeFileSync(builtContent + shortname + 'html', final)\n  })\n  // hard coded right now because, reasons\n  console.log(\"Built!\")\n}\n\nfunction makeShortname(filename) {\n  // FROM guide/raw-content/10_merge_tada.html\n  // TO merge_tada.\n    return filename.split('/').pop().split('_')\n      .slice(1).join('_').replace('html', '')\n}\n\nfunction makeTitleName(filename) {\n  var short = makeShortname(filename).split('_')\n    .join(' ').replace('.', '')\n  return grammarize(short)\n}\n\nfunction buildHeader(filename) {\n  var num = filename.split('/').pop().split('_')[0]\n  var data = getPrevious(num)\n  var title = makeTitleName(filename)\n  var source = fs.readFileSync(__dirname + '/partials/header.html').toString()\n  var template = Handlebars.compile(source)\n  var content = {\n    challengetitle: title,\n    challengenumber: num,\n    lang: lang ? '-' + lang : '',\n    preurl: data.preurl,\n    nexturl: data.nexturl\n  }\n  return template(content)\n}\n\nfunction grammarize(name) {\n  var correct = name\n  var wrongWords = ['arent', 'githubbin', 'its']\n  var rightWords = [\"aren't\", \"GitHubbin\", \"it's\"]\n\n  wrongWords.forEach(function(word, i) {\n    if (name.match(word)) {\n      correct = name.replace(word, rightWords[i])\n    }\n  })\n  return correct\n}\n\nfunction buildFooter(file) {\n  var num = file.split('/').pop().split('_')[0]\n  var data = getPrevious(num)\n  data.lang = lang ? '-' + lang : ''\n  var source = fs.readFileSync(__dirname + '/partials/footer.html').toString()\n  var template = Handlebars.compile(source)\n  return template(data)\n}\n\nfunction getPrevious(num) {\n  var pre = parseInt(num) - 1\n  var next = parseInt(num) + 1\n  var preurl = ''\n  var prename = ''\n  var nexturl = ''\n  var nextname = ''\n  thefiles.forEach(function(file) {\n    if (pre === 0) {\n      prename = \"All Challenges\"\n      preurl = lang ? '../index-' + lang + '.html' : '../index.html'\n    } else if (file.match(pre)) {\n      prename = makeTitleName(file)\n      var getridof = pre + '_'\n      preurl = file.replace(getridof, '')\n    }\n    if (next === 12) {\n      nextname = \"Done!\"\n      nexturl = lang ? '../index-' + lang + '.html' : '../index.html'\n    } else if (file.match(next)) {\n      nextname = makeTitleName(file)\n      var getridof = next + '_'\n      nexturl = file.replace(getridof, '')\n    }\n  })\n  return {prename: prename, preurl: preurl,\n      nextname: nextname, nexturl: nexturl}\n}\n","/home/travis/build/npmtest/node-npmtest-git-it/node_modules/git-it/guide/translate-locale.js":"var fs = require('fs')\nvar cheerio =  require('cheerio')\n\n\nmodule.exports = function translateLocale(fileContent, lang) {\n  if (!lang) return\n\n  // get translation data\n  var translations = JSON.parse(fs.readFileSync(__dirname + '/locale-' + lang + '.json'))\n\n  // load file into Cheerio\n  var $ = cheerio.load(fileContent)\n\n  var types = [\"n\", \"v\", \"adj\"]\n\n  types.forEach(function (type) {\n\n    $(type).each(function(i, tag) {\n      var word = $(tag).text().toLowerCase()\n      var translatiion = \"\"\n\n      if (!translations[type][word]) {\n        return console.log(\"Didn't find trasnlation for \", type, word)\n      } else {\n        translation = translations[type][word]\n      }\n\n      var span = \"<span class='superscript'>\" + translation + \"</span>\"\n      $(tag).prepend(span)\n    })\n  })\n\n  return ($.html())\n}\n","/home/travis/build/npmtest/node-npmtest-git-it/node_modules/git-it/problems/branches_arent_just_for_birds/setup.js":"module.exports = function () {\n  return { args: [], stdin: null }\n}","/home/travis/build/npmtest/node-npmtest-git-it/node_modules/git-it/problems/branches_arent_just_for_birds/solution.js":"console.log(\"Found branch as expected!\")\nconsole.log(\"Changes have been pushed!\")\nconsole.log(\"File in contributors folder!\")\n","/home/travis/build/npmtest/node-npmtest-git-it/node_modules/git-it/problems/branches_arent_just_for_birds/verify.js":"#!/usr/bin/env node\n\nvar exec = require('child_process').exec\nvar fs = require('fs')\nvar path = require('path')\nvar username = \"\"\n\n// get their username\n// verify branch matches username, case too.\n// verify they've pushed\n// check the file is in contributors directory\n\nexec('git config user.username', function(err, stdout, stderr) {\n  if (err) return console.log(err)\n  username = stdout.trim()\n\n  exec('git rev-parse --abbrev-ref HEAD', function(err, stdout, stderr) {\n    if (err) return console.log(err)\n    var actualBranch = stdout.trim()\n    var expectedBranch = \"add-\" + username\n    if (actualBranch.match(expectedBranch)) {\n      console.log(\"Found branch as expected!\")\n      checkPush(actualBranch)\n    } else {\n      console.log(\"Branch name expected: \" + expectedBranch)\n      checkPush(actualBranch)\n    }\n  })\n})\n\nfunction checkPush(branchname) {\n  exec('git reflog show origin/' + branchname, function(err, stdout, stderr) {\n    if (err) return console.log(err)\n    if (stdout.match(\"update by push\")) console.log(\"Changes have been pushed!\")\n    else console.log(\"Changes not pushed\")\n    findFile()\n  })\n}\n\nfunction findFile() {\n  // see if user is already within /contributors\n  if (process.cwd().match(\"contributors\")) {\n    check(process.cwd())\n  } else {\n    check(path.join(process.cwd(), \"/contributors/\"))\n  }\n\n  function check(userspath) {\n    fs.readdir(userspath, function(err, files) {\n      if (err) return console.log(err)\n      var allFiles = files.join()\n      if (allFiles.match(username)) console.log(\"File in contributors folder!\")\n      else console.log(\"File NOT in contribs.. folder!\")\n    })\n  }\n}\n"}